class Solution {
    public void nextPermutation(int[] nums) {
        int n = nums.length; //  use nums.length for array length

        int ind = -1;  // ind = index
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) { //  Access array elements directly using nums[i]
                ind = i;
                break;
            }
        }

        if (ind == -1) {
            reverse(nums,0,n-1); //  Use a separate reverse method for arrays
            return; //  Return type is void, no need to return nums
        }

        for (int i = n - 1; i > ind; i--) {
            if (nums[i] > nums[ind]) { //  Access array elements directly using nums[i]
                int tmp = nums[i];
                nums[i] = nums[ind];
                nums[ind] = tmp;
                break;
            }
        }

        // Step 3: reverse the right half:
        reverse(nums, ind + 1, n - 1); //  Use a separate reverse method for arrays
    }

    private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int tmp = nums[start];
            nums[start] = nums[end];
            nums[end] = tmp;
            start++;
            end--;
        }
    }
}
